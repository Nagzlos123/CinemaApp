CREATE OR REPLACE PROCEDURE seanse_w_dniu(dzien DATE) IS CURSOR seanse IS SELECT seans.id, seans.godzina, film.tytul, sala.nr FROM seans,film,sala WHERE seans.id_filmu=film.id AND seans.id_sali=sala.id AND seans.data=dzien ORDER BY seans.godzina; BEGIN DBMS_OUTPUT.ENABLE; DBMS_OUTPUT.PUT_LINE('Seanse w dniu ' || TO_CHAR(dzien) || ':'); FOR rekord IN seanse LOOP DBMS_OUTPUT.PUT_LINE('Seans nr ' || rekord.id || ': ' ||rekord.godzina || ' ' || rekord.tytul || ' (' || rekord.nr || ')'); END LOOP; END;/
CREATE OR REPLACE PROCEDURE drukuj_cennik (rok INT) IS CURSOR rodzaje_biletu IS SELECT id,nazwa FROM rodzaj_biletu; CURSOR ceny (rodzaj INT) IS SELECT dzien_tygodnia.nazwa, cennik.cena FROM dzien_tygodnia, cennik WHERE dzien_tygodnia.id=cennik.id_dnia_tygodnia AND cennik.rok=rok AND cennik.id_rodzaju_biletu=rodzaj; BEGIN DBMS_OUTPUT.ENABLE; FOR r IN rodzaje_biletu LOOP DBMS_OUTPUT.PUT_LINE('Cennik dla biletu: ' || r.nazwa); FOR rekord IN ceny(r.id) LOOP DBMS_OUTPUT.PUT_LINE(rekord.nazwa || ': ' || rekord.cena || ' zl'); END LOOP; DBMS_OUTPUT.PUT_LINE('-------------------------------'); END LOOP; END;/
CREATE OR REPLACE PROCEDURE drukuj_adres(id_kupujacego INT) IS ul VARCHAR2(100); nr_d INT; nr_m INT; miej VARCHAR2(100); kod VARCHAR2(100); id_adr INT; BEGIN SELECT id_adresu INTO id_adr FROM kupujacy WHERE id=id_kupujacego; SELECT ulica INTO ul FROM adres WHERE id=id_adr; SELECT nr_domu INTO nr_d FROM adres WHERE id=id_adr; SELECT nr_mieszkania INTO nr_m FROM adres WHERE id=id_adr; SELECT miejscowosc INTO miej FROM adres WHERE id=id_adr; SELECT kod_pocztowy INTO kod FROM adres WHERE id=id_adr; DBMS_OUTPUT.ENABLE; DBMS_OUTPUT.PUT_LINE('Ulica: ' || ul); DBMS_OUTPUT.PUT_LINE('Nr domu: ' || TO_CHAR(nr_d)); DBMS_OUTPUT.PUT_LINE('Nr mieszkania: ' || NVL(TO_CHAR(nr_m),'-')); DBMS_OUTPUT.PUT_LINE('Miejscowosc: ' || miej); DBMS_OUTPUT.PUT_LINE('Kod pocztowy: ' || kod); END;/
CREATE OR REPLACE FUNCTION liczba_wolnych_miejsc(id_s INT) RETURN INT IS wyjatek EXCEPTION; liczba INT; l_miejsc INT; l_biletow INT; liczba_seansow INT; BEGIN SELECT COUNT(*) INTO liczba_seansow FROM seans WHERE id=id_s; IF liczba_seansow=0 THEN RAISE wyjatek; ELSE SELECT sala.liczba_miejsc INTO l_miejsc FROM sala, seans WHERE seans.id_sali=sala.id AND seans.id=id_s; SELECT COUNT(*) INTO l_biletow FROM bilet WHERE id_seansu=id_s; liczba := l_miejsc - l_biletow; RETURN(liczba); END IF; EXCEPTION WHEN wyjatek THEN DBMS_OUTPUT.ENABLE; DBMS_OUTPUT.PUT_LINE('Bledny identyfikator seansu'); RETURN NULL; END;/
CREATE OR REPLACE PROCEDURE kopiuj_bilet(id_biletu INT) IS id_s INT; id_c INT; id_p INT; id_k INT; max_id INT; BEGIN SELECT id_seansu INTO id_s FROM bilet WHERE id=id_biletu; SELECT id_cennika INTO id_c FROM bilet WHERE id=id_biletu; SELECT id_promocji INTO id_p FROM bilet WHERE id=id_biletu; SELECT id_kupujacego INTO id_k FROM bilet WHERE id=id_biletu; INSERT INTO bilet VALUES (sekwencja_bilet.nextval, id_s, id_c, id_p, id_k); END;/
CREATE OR REPLACE PROCEDURE losuj_darmowy_bilet IS min_id INT; max_id INT; liczba_seansow INT; wylosowany_id INT; CURSOR wylosowany IS SELECT seans.data,seans.godzina,sala.nr, film.tytul FROM seans, sala, film WHERE seans.id_sali=sala.id AND seans.id_filmu=film.id AND seans.id=wylosowany_id; BEGIN DBMS_OUTPUT.ENABLE; SELECT COUNT(*) INTO liczba_seansow FROM seans WHERE data>CURRENT_DATE; IF liczba_seansow=0 THEN DBMS_OUTPUT.PUT_LINE('Nie znaleziono zadnego seansu'); ELSE SELECT MIN(id) INTO min_id FROM seans WHERE data>CURRENT_DATE; SELECT MAX(id) INTO max_id FROM seans WHERE data>CURRENT_DATE; wylosowany_id := DBMS_RANDOM.VALUE(min_id,max_id); FOR r IN wylosowany LOOP DBMS_OUTPUT.PUT_LINE('Wylosowano bilet na seans w dniu ' || TO_CHAR(r.data) || ' o godz. ' || r.godzina || ' - ' || r.nr); DBMS_OUTPUT.PUT_LINE('Film pt. ' || r.tytul); END LOOP; END IF; END;/
CREATE OR REPLACE FUNCTION oblicz_cene_biletu(id_biletu INT) RETURN FLOAT IS cena_biletu FLOAT; cena_z_rabatem FLOAT; rabat INT; promocja_id INT; liczba_biletow INT; BEGIN SELECT COUNT(*) INTO liczba_biletow FROM bilet WHERE id=id_biletu; IF liczba_biletow=0 THEN RAISE_APPLICATION_ERROR(-20001, 'Bledny numer biletu'); END IF; SELECT cennik.cena INTO cena_biletu FROM cennik, bilet WHERE cennik.id=bilet.id_cennika AND bilet.id=id_biletu; SELECT id_promocji INTO promocja_id FROM bilet WHERE id=id_biletu; IF promocja_id IS NULL THEN rabat := 0; ELSE SELECT promocja.wartosc INTO rabat FROM promocja, bilet WHERE promocja.id=bilet.id_promocji AND bilet.id=id_biletu; END IF; cena_z_rabatem := cena_biletu * (100 - rabat) / 100; RETURN(cena_z_rabatem); END;/